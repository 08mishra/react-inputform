{"version":3,"sources":["counter.js","App.js","reportWebVitals.js","index.js"],"names":["Counter","props","state","count","increment","bind","decrement","reset","this","setState","className","onClick","React","Component","Form","input","submit","handleChange","handleSubmit","event","target","value","preventDefault","onSubmit","onChange","placeholder","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mSAqDeA,E,kDAhDX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,MAAO,GAGX,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBACjB,EAAKE,MAAQ,EAAKA,MAAMF,KAAX,gBARE,E,6CAWnB,WACIG,KAAKC,UAAS,SAAAP,GAAK,MAAK,CACpBC,MAAOD,EAAMC,MAAQ,Q,uBAI7B,WACIK,KAAKC,UAAS,SAAAP,GAAK,MAAK,CACpBC,MAAOD,EAAMC,MAAQ,Q,mBAI7B,WACIK,KAAKC,SAAS,CACVN,MAAO,M,oBAIf,WACI,OAEI,sBACIO,UAAY,oBADhB,UAEA,oDAFA,IAG6B,wBACtBC,QAAYH,KAAKJ,UADK,yBAH7B,IAI2D,wBACpDO,QAAYH,KAAKF,UADmC,yBAJ3D,IAK2D,wBACpDK,QAAYH,KAAKD,MADmC,qBAL3D,IAMmD,mCAC5CC,KAAKN,MAAMC,MADiC,OANnD,W,GAlCUS,IAAMC,WCgDbC,E,kDA9CX,WAAYb,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTa,MAAO,GACPC,OAAQ,IAEZ,EAAKC,aAAe,EAAKA,aAAaZ,KAAlB,gBACpB,EAAKa,aAAe,EAAKA,aAAab,KAAlB,gBAPL,E,gDASnB,SAAac,GACTX,KAAKC,SAAS,CACVM,MAAOI,EAAMC,OAAOC,U,0BAI5B,SAAaF,GACTA,EAAMG,iBACNd,KAAKC,SAAS,CACVO,OAAQR,KAAKN,MAAMa,U,oBAK3B,WACI,OAAS,sBACDL,UAAY,iBADX,UAEL,cACA,EADA,IAGA,wDALK,IAM4B,uBAC5Ba,SAAaf,KAAKU,aADU,UAEjC,uBACMG,MAAUb,KAAKN,MAAMa,MAC3BS,SAAahB,KAAKS,aAClBQ,YAAc,0CALmB,IAM/B,mCACKjB,KAAKN,MAAMc,OADhB,OAN+B,OAN5B,W,GAzBEJ,IAAMC,WCQVa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OAAQ,cACb,IAAMC,WADO,UAEb,cACA,EADA,MAIAC,SAASC,eAAe,SAM5Bb,M","file":"static/js/main.edce765f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './Counter.css';\r\n\r\nclass Counter extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            count: 0\r\n        };\r\n\r\n        this.increment = this.increment.bind(this);\r\n        this.decrement = this.decrement.bind(this);\r\n        this.reset = this.reset.bind(this);\r\n    }\r\n\r\n    increment() {\r\n        this.setState(state => ({\r\n            count: state.count + 1\r\n        }));\r\n    }\r\n\r\n    decrement() {\r\n        this.setState(state => ({\r\n            count: state.count - 1\r\n        }));\r\n    }\r\n\r\n    reset() {\r\n        this.setState({\r\n            count: 0\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <\r\n            div className = 'counter-container' >\r\n            <\r\n            h1 > I am counter app < /h1> <\r\n            button onClick = { this.increment } > increment < /button> <\r\n            button onClick = { this.decrement } > decrement < /button> <\r\n            button onClick = { this.reset } > reset < /button> <\r\n            h1 > { this.state.count } < /h1> < /\r\n            div >\r\n\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Counter;","import './App.css';\nimport React from 'react';\nimport Counter from './counter'\n\nclass Form extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            input: '',\n            submit: ''\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    handleChange(event) {\n        this.setState({\n            input: event.target.value\n        });\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        this.setState({\n            submit: this.state.input\n        });\n\n    }\n\n    render() {\n        return ( <\n            div className = 'form-container' >\n            <\n            Counter / >\n\n            <\n            h1 > this is form control < /h1> <\n            form onSubmit = { this.handleSubmit } >\n            <\n            input value = { this.state.input }\n            onChange = { this.handleChange }\n            placeholder = 'type here and then enter to see magic' /\n            > <\n            h2 > { this.state.submit } < /h2> < /\n            form > <\n            /div>\n\n        );\n    }\n\n}\n\nexport default Form;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Form from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render( <\n    React.StrictMode >\n    <\n    Form / >\n    <\n    /React.StrictMode>,\n    document.getElementById('main')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}